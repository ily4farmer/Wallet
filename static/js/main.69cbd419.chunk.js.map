{"version":3,"sources":["Api/Connect.ts","App.tsx","index.tsx"],"names":["metamask","window","ethereum","provider","providers","Web3Provider","send","signer","getSigner","getAddress","wallet","wc","WalletConnectProvider","qrcode","rpc","enable","web3Provider","Wrapper","styled","div","Button","button","Address","App","useState","metamaskAdd","setMetamaskAdd","wcAdd","setWcAdd","console","log","connectWC","onClick","ReactDOM","render","document","getElementById"],"mappings":"kdAGaA,EAAQ,iDAAG,sGACfC,OAAeC,SADA,uBAEVC,EAAW,IAAIC,IAAUC,aAAcJ,OAAeC,UAF5C,SAGVC,EAASG,KAAK,sBAAuB,IAH3B,cAIVC,EAASJ,EAASK,YAJR,SAKKD,EAAOE,aALZ,cAKVC,EALU,yBAOT,CAACA,WAPQ,2CAAH,qDAWRC,EAAE,iDAAG,2GACRR,EAAW,IAAIS,IAAsB,CAEvCC,QAAQ,EACRC,IAAK,CACD,GAAI,kDACJ,EAAG,mEANG,SAWNX,EAASY,SAXH,cAaNC,EAAe,IAAIZ,IAAUC,aAAaF,GAC1CI,EAASS,EAAaR,YAdhB,SAeSD,EAAOE,aAfhB,cAeNC,EAfM,yBAiBL,CAACA,WAjBI,2CAAH,qD,iBCTTO,EAAUC,IAAOC,IAAV,mIAOPC,EAASF,IAAOG,OAAV,4FAMNC,EAAUJ,IAAOC,IAAV,6CAkCEI,MA9Bf,WAEE,MAAsCC,mBAAiB,IAAvD,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAA0BF,mBAAiB,IAA3C,mBAAOG,EAAP,KAAcC,EAAd,KAEMnB,EAAU,iDAAG,uGACjBoB,QAAQC,IAAI,WADK,SAEM9B,IAFN,gBAEVU,EAFU,EAEVA,OACPgB,EAAehB,GAHE,2CAAH,qDAMVqB,EAAS,iDAAG,gHACOpB,IADP,gBACTD,EADS,EACTA,OACPkB,EAASlB,GAFO,2CAAH,qDAKf,OACE,eAACO,EAAD,WACC,cAACG,EAAD,CAAQY,QAASvB,EAAjB,8BAGA,cAACa,EAAD,UAAUG,IACV,cAACL,EAAD,CAAQY,QAASD,EAAjB,wBAGA,cAACT,EAAD,UAAUK,QC3CfM,IAASC,OACH,cAAC,EAAD,IACJC,SAASC,eAAe,W","file":"static/js/main.69cbd419.chunk.js","sourcesContent":["import { providers } from \"ethers\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nexport const metamask = async():Promise<any> => {\r\n    if ((window as any).ethereum) {\r\n        const provider = new providers.Web3Provider((window as any).ethereum)\r\n        await provider.send(\"eth_requestAccounts\", [])\r\n        const signer = provider.getSigner();\r\n        const wallet = await signer.getAddress()\r\n        \r\n        return {wallet}\r\n    }\r\n}\r\n\r\nexport const wc = async():Promise<any> => {\r\n    const provider = new WalletConnectProvider({\r\n        // infuraId: \"27e484dcd9e3efcfd25a83a78777cdf1\",\r\n        qrcode: true,\r\n        rpc: { \r\n            97: 'https://data-seed-prebsc-1-s1.binance.org:8545/', \r\n            3: \"https://ropsten.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\"\r\n        },\r\n      });\r\n      \r\n    //   //  Enable session (triggers QR Code modal)\r\n      await provider.enable();\r\n    // await provider.disconnect()\r\n      const web3Provider = new providers.Web3Provider(provider);\r\n      const signer = web3Provider.getSigner();\r\n      const wallet = await signer.getAddress();\r\n\r\n      return {wallet}\r\n      \r\n} ","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { metamask, wc } from './Api/Connect';\nimport './App.css';\n\nconst Wrapper = styled.div`\n  display: flex;\n  /* justify-content: center; */\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Button = styled.button`\n  padding: 5px 10px;\n  background-color: gray;\n  color: red;\n`\n\nconst Address = styled.div`\n  height: 40px;\n`\n\nfunction App() {\n\n  const [metamaskAdd, setMetamaskAdd] = useState<string>(\"\")\n  const [wcAdd, setWcAdd] = useState<string>(\"\")\n\n  const getAddress = async():Promise<void> => {\n    console.log(\"connect\");\n    const {wallet} = await metamask()\n    setMetamaskAdd(wallet)\n  }\n\n  const connectWC = async() => {\n    const {wallet} = await wc()\n    setWcAdd(wallet)\n  }\n\n  return (\n    <Wrapper>\n     <Button onClick={getAddress}>\n       Connect Metamask\n     </Button>\n     <Address>{metamaskAdd}</Address>\n     <Button onClick={connectWC}>\n       Connect WC\n     </Button>\n     <Address>{wcAdd}</Address>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}